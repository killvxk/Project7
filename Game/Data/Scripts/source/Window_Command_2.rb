#encoding:utf-8
#==============================================================================
# ■ Window_Command
#------------------------------------------------------------------------------
# 　带有指令选择的窗口
#==============================================================================

class Window_Command < Window_Selectable
  #--------------------------------------------------------------------------
  # ● 初始化对象
  #--------------------------------------------------------------------------
  def initialize(x, y)
    @comps = []
    clear_command_list
    make_command_list
    super(x, y, window_width, window_height)
    refresh
    select(0)
    activate
  end
  #--------------------------------------------------------------------------
  # ● 获取窗口的宽度
  #--------------------------------------------------------------------------
  def window_width
    return 160
  end
  #--------------------------------------------------------------------------
  # ● 获取窗口的高度
  #--------------------------------------------------------------------------
  def window_height
    fitting_height(visible_line_number)
  end
  #--------------------------------------------------------------------------
  # ● 获取显示行数
  #--------------------------------------------------------------------------
  def visible_line_number
    item_max
  end
  #--------------------------------------------------------------------------
  # ● 获取项目数
  #--------------------------------------------------------------------------
  def item_max
    @list.size
  end
  #--------------------------------------------------------------------------
  # ● 清除指令列表
  #--------------------------------------------------------------------------
  def clear_command_list
    @list = []
  end
  #--------------------------------------------------------------------------
  # ● 生成指令列表
  #--------------------------------------------------------------------------
  def make_command_list
  end
  #--------------------------------------------------------------------------
  # ● 添加指令
  #     name    : 指令名称
  #     symbol  : 对应的符号
  #     enabled : 有效状态的标志
  #     ext     : 任意的扩展数据
  #--------------------------------------------------------------------------
  def add_command(name, symbol, enabled = true, ext = nil)
    @list.push({:name=>name, :symbol=>symbol, :enabled=>enabled, :ext=>ext})
  end
  #--------------------------------------------------------------------------
  # ● 获取指令名称
  #--------------------------------------------------------------------------
  def command_name(index)
    @list[index][:name]
  end
  #--------------------------------------------------------------------------
  # ● 获取指令的有效状态
  #--------------------------------------------------------------------------
  def command_enabled?(index)
    @list[index][:enabled]
  end
  #--------------------------------------------------------------------------
  # ● 获取选项的指令数据
  #--------------------------------------------------------------------------
  def current_data
    index >= 0 ? @list[index] : nil
  end
  #--------------------------------------------------------------------------
  # ● 获取选项的有效状态
  #--------------------------------------------------------------------------
  def current_item_enabled?
    current_data ? current_data[:enabled] : false
  end
  #--------------------------------------------------------------------------
  # ● 获取选项的符号
  #--------------------------------------------------------------------------
  def current_symbol
    current_data ? current_data[:symbol] : nil
  end
  #--------------------------------------------------------------------------
  # ● 获取选项的扩展数据
  #--------------------------------------------------------------------------
  def current_ext
    current_data ? current_data[:ext] : nil
  end
  #--------------------------------------------------------------------------
  # ● 将光标移动到指定的标志符对应的选项
  #--------------------------------------------------------------------------
  def select_symbol(symbol)
    @list.each_index {|i| select(i) if @list[i][:symbol] == symbol }
  end
  #--------------------------------------------------------------------------
  # ● 将光标移动到指定的扩展数据对应的选项
  #--------------------------------------------------------------------------
  def select_ext(ext)
    @list.each_index {|i| select(i) if @list[i][:ext] == ext }
  end
  #--------------------------------------------------------------------------
  # ● 获取对齐方向
  #--------------------------------------------------------------------------
  def alignment
    return 0
  end
  #--------------------------------------------------------------------------
  # ● 获取决定处理的有效状态
  #--------------------------------------------------------------------------
  def ok_enabled?
    return true
  end
  #--------------------------------------------------------------------------
  # ● 调用“确定”的处理方法
  #--------------------------------------------------------------------------
  def call_ok_handler
    if handle?(current_symbol)
      call_handler(current_symbol)
    elsif handle?(:ok)
      super
    else
      activate
    end
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def refresh
    clear_command_list
    make_command_list
    create_contents
    super
  end
  #--------------------------------------------------------------------------
  # ● 捆綁繪制項目+添加點擊區
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect(index)
    @comps.push Comp_Command.new(rect,self,index)
    change_color(normal_color, command_enabled?(index))
    draw_text(item_rect_for_text(index), command_name(index), alignment)
  end
  #--------------------------------------------------------------------------
  # ● 捆綁x值
  #--------------------------------------------------------------------------
  def x=(new_x)
    delta = (new_x - self.x)
    @comps.each do |c| c.x += delta end
    super
  end
  #--------------------------------------------------------------------------
  # ● 捆綁y值
  #--------------------------------------------------------------------------
  def y=(new_y)
    delta = (new_y - self.y)
    @comps.each do |c| c.y += delta end
    super
  end
  #--------------------------------------------------------------------------
  # ● 捆綁z值
  #--------------------------------------------------------------------------
  def z=(new_z)
    @comps.each do |c| c.z = new_z+1 end
    super
  end
  #--------------------------------------------------------------------------
  # ● 捆綁光标向下移动
  #--------------------------------------------------------------------------
  def cursor_down(wrap = false)
    super
    mouse_upDown
  end
  #--------------------------------------------------------------------------
  # ● 捆綁光标向上移动
  #--------------------------------------------------------------------------
  def cursor_up(wrap = false)
    super
    mouse_upDown
  end
  #--------------------------------------------------------------------------
  # ● 捆綁光标向左移动
  #--------------------------------------------------------------------------
  def cursor_left(wrap = false)
    super
    mouse_leftRight
  end
  #--------------------------------------------------------------------------
  # ● 捆綁光标向右移动
  #--------------------------------------------------------------------------
  def cursor_right(wrap = false)
    super
    mouse_leftRight
  end
  #--------------------------------------------------------------------------
  # ● 捆綁釋放
  #--------------------------------------------------------------------------
  def dispose
    super
    @comps.each do |c| c.dispose end
  end
  #--------------------------------------------------------------------------
  # ● 接收信息
  #--------------------------------------------------------------------------
  def sendMSG(index,msg)
    case msg
    when :e
      self.active = true
      select(index)
    when :c
      call_ok_handler
    when :d
      call_cancel_handler
    end
  end
  #--------------------------------------------------------------------------
  # ● 鼠標上下移動
  #--------------------------------------------------------------------------
  def mouse_upDown
    rect = item_rect(index)
    pos = Mouse.get_pos
    return if pos.nil?
    y = rect.y+self.y+rect.height/2
    real_x = rect.x+self.x+12
    if pos[0] > real_x && pos[0] < real_x+rect.width
      x = pos[0]
    else
      x = real_x + rect.width/2
    end
    Mouse.set_pos(x,y)
  end
  #--------------------------------------------------------------------------
  # ● 鼠標左右移動
  #--------------------------------------------------------------------------
  def mouse_leftRight
    rect = item_rect(index)
    pos = Mouse.get_pos
    return if pos.nil?
    x = rect.x+self.x+rect.width/2
    real_y = rect.y+self.y+12
    if pos[0] > real_y && pos[0] < real_y+rect.height
      y = pos[0]
    else
      y = real_y + rect.height/2
    end
    Mouse.set_pos(x,y)
  end
end
